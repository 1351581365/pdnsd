dnl $Id: configure.in,v 1.22 2001/01/24 18:57:21 thomas Exp $
dnl Process this file with autoconf to produce a configure script.
AC_INIT(src)

test -z "$CFLAGS" && CFLAGS="-Wall -pedantic -g"

CFLAGS="$CFLAGS -D_REENTRANT -D_THREAD_SAFE -DCONFDIR=\"\\\"@sysconfdir@\\\"\""

PACKAGE="pdnsd"
VERSION=`cat version`

distribution="Generic"
target="autodetect"
cachedir="/var/cache/$PACKAGE"
ipv4_default=1
ipv6_default=0
have_ipv4="yes"
newrr="yes"
query_m="udponly"
have_tcp_server="yes"
adisc="yes";
slock="no";
def_id="nobody"
have_rcsids="no"
udp_queries="yes"
tcp_queries="no"
allcachedbms="native gdbm" ; cachedbm="native" ; unuseddbms="" ;
tempdir="/tmp";
randomdev=default
freebsd_pthread="4"

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)

AM_CONFIG_HEADER(config.h)

AC_ARG_WITH(distribution,
[  --with-distribution=distro  Specify target distribution (default=Generic;
                              others: RedHat, SuSE, Debian)],
  distribution=$withval)
AC_SUBST(distribution)

AC_ARG_WITH(target,
[  --with-target=platform      Change compilation target platform (default: 
			      autodetect; others: Linux, BSD)],
  target=$withval)
case $target in
  Linux|linux) 
    AC_DEFINE(TARGET, TARGET_LINUX) 
    ;;
  BSD| bsd)
    AC_DEFINE(TARGET, TARGET_BSD)
    ;;
  autodetect)
    ;;
  *)
    AC_MSG_ERROR([--with-target must have Linux or BSD as parameter.])
    ;;
esac

AC_ARG_WITH(cachedir,
[  --with-cachedir=dir         Default directory for pdnsd cache 
                              (default=/var/cache/pdnsd)],
  cachedir=$withval)
AC_DEFINE_UNQUOTED(CACHEDIR, "$cachedir")
AC_SUBST(cachedir)

AC_ARG_WITH(tempdir,
[  --with-tempdir=dir          Default directory for the pdnsd 
                              control socket (default=/tmp)],
  tempdir=$withval)
AC_DEFINE_UNQUOTED(TEMPDIR, "$tempdir")

AC_ARG_WITH(dbm,
[  --with-dbm=dbm              Specifiy database manager to use for 
                              cacheing (default=native; others: gdbm)],
  cachedbm=$withval)

unuseddbms=""
for dbm in $allcachedbms; do 
  test "$dbm" != "$cachedbm" && unuseddbms="$unuseddbms $dbm"
done
AC_SUBST(allcachedbms)
AC_SUBST(cachedbm)
AC_SUBST(unuseddbms)

# Since strings are not permitted as compiler directive conditional args
case "$cachedbm" in
  native)
    AC_DEFINE(CACHE_DBM, DBM_NATIVE)
	;;
  gdbm)
    AC_DEFINE(CACHE_DBM, DBM_GDBM)
	;;
  *)
    AC_MSG_ERROR([--with-dbm dbm selected not supported.])
	;;
esac

AC_ARG_ENABLE(isdn,
[  --enable-isdn               Enable ISDN support (may cause problems on 
                              some systems; only for Linux)],
  test $enableval = "yes" && AC_DEFINE(ISDN_SUPPORT))

AC_ARG_ENABLE(ipv4,
[  --disable-ipv4            Disable IPv4 networking support 
                              (default=enabled)],
  have_ipv4=$enableval)

test $have_ipv4 = "yes" && AC_DEFINE(ENABLE_IPV4)

AC_ARG_ENABLE(ipv6,
[  --enable-ipv6            Enable IPv6 networking support],
[ if test $enableval = "yes" ; then
    AC_DEFINE(ENABLE_IPV6)
    if test $have_ipv4 != "yes" ; then
      ipv4_default=0	
      ipv6_default=1
    fi
  fi])
  
AC_ARG_ENABLE(ipv4-startup,
[  --disable-ipv4-startup      Disable IPv4 on pdnsd startup by default
                              (default=enabled)],
[ if test $enableval = "yes" ; then
    ipv4_default=1
  else
    ipv4_default=0
  fi])

AC_ARG_ENABLE(ipv6-startup,
[  --enable-ipv6-startup       Enable IPV6 on pdnsd startup by default
                              (default=IPv4)],
[ if test $enableval = "yes" ; then
    ipv6_default=1
  else 
    ipv6_default=0
  fi])

AC_DEFINE_UNQUOTED(DEFAULT_IPV4, $ipv4_default)
AC_DEFINE_UNQUOTED(DEFAULT_IPV6, $ipv6_default)
 
AC_ARG_ENABLE(udp-queries,
[  --disable-udp-queries       Disable udp as query method.],
  udp_queries=$enableval)

AC_ARG_ENABLE(tcp-queries,
[  --enable-tcp-queries        Enable tcp as query method.],
  tcp_queries=$enableval)

AC_ARG_WITH(query-method,
[  --with-query-method=qm      Specify the query method (default=udponly;
                              others: tcpudp, tcponly)],
  query_m=$withval)
case $query_m in
  udponly|UDPonly) 
    AC_DEFINE(M_PRESET, UDP_ONLY)
    udp_queries=yes;
    ;;
  tcponly|TCPonly) 
    AC_DEFINE(M_PRESET, TCP_ONLY) 
    tcp_queries=yes;
    ;;
  tcpudp|TCPUDP) 
    AC_DEFINE(M_PRESET, TCP_UDP) 
    udp_queries=yes;
    tcp_queries=yes;
    ;;
  *)
    AC_MSG_ERROR([--with-query-method must have udponly, tcpudp or tcponly as parameter.])
    ;;
esac

test $udp_queries != "yes" && AC_DEFINE(NO_UDP_QUERIES)
test $tcp_queries != "yes" && AC_DEFINE(NO_TCP_QUERIES)

AC_ARG_ENABLE(tcp-server,
[  --disable-tcp-server        Enable the TCP serving ability of pdnsd],
  have_tcp_server=$enableval)

test $have_tcp_server != "yes" && AC_DEFINE(NO_TCP_SERVER)

AC_ARG_ENABLE(src-addr-disc,
[  --disable-src-addr-disc     Disable the UDP source address discovery],
    adisc=$enableval)

test $adisc = "yes" && AC_DEFINE(SRC_ADDR_DISC)

AC_ARG_ENABLE(socket-locking,
[  --enable-socket-locking     Enable the UDP socket locking],
    slock=$enableval)

test $slock = "yes" && AC_DEFINE(SOCKET_LOCKING)

AC_ARG_ENABLE(poll,
[  --disable-poll              Disable poll(2) and use select(2)
                              (default=enabled)],
   test $enableval != "yes" && AC_DEFINE(NO_POLL))
  
AC_ARG_ENABLE(new-rrs,
[  --disable-new-rrs           Disable new DNS RR types, may cause problems
				with some resolvers],
   newrr=$enableval)
  
test $newrr = "yes" && AC_DEFINE(DNS_NEW_RRS)

AC_ARG_ENABLE(strict-rfc2181,
[  --enable-strict-rfc2181     Enforce strict RFC 2181 compliance],
   test $enableval = "yes" && AC_DEFINE(RFC2181_ME_HARDER))
  
AC_ARG_WITH(random-device,
[  --with-random-device=device Specify random device other than 
                              /dev/random; default: C Library random() PRNG;
			      special value arc4random for BSD C Library
			      arc4random function (default on FreeBSD)],
   randomdev=$withval)

if test "$randomdev" = arc4random ; then
	AC_DEFINE(R_ARC4RANDOM)  
elif test "$randomdev" = random ; then
	AC_DEFINE(R_RANDOM)
elif test "$randomdev" = default ; then
	AC_DEFINE(R_DEFAULT)
else
	AC_DEFINE_UNQUOTED(RANDOM_DEVICE, "$randomdev")  
fi

AC_ARG_WITH(default-id,
[  --with-default-id=id        Specify default uid/gid for pdnsd 
                              (default=nobody)],
  def_id=$withval)
AC_SUBST(def_id)
  
AC_ARG_WITH(debug,
[  --with-debug=level          Specify debugging level],
  AC_DEFINE_UNQUOTED(DEBUG, $withval))
  
AC_ARG_WITH(verbosity,
[  --with-verbosity=level      Specify default message verbosity],
  AC_DEFINE_UNQUOTED(VERBOSITY, $withval))
  
AC_ARG_ENABLE(hash-debug,
[  --enable-hash-debug         Debug hash tables (warning: massive output)],
  test $enableval = "yes" && AC_DEFINE(DEBUG_HASH))
  
AC_ARG_ENABLE(yy-debug,
[  --enable-yy-debug           Debug config file parser],
  test $enableval = "yes" && AC_DEFINE(DEBUG_YY))

AC_ARG_ENABLE(rcsids,
[  --enable-rcsids             Enable RCS IDs in executables (default=disabled)],
  have_rcsids=$enableval)

test $have_rcsids != "yes" && AC_DEFINE(NO_RCSIDS)

AC_ARG_WITH(tcp-qtimeout,
[  --with-tcp-qtimeout=secs    Specify default tcp query timeout (default=30) ],
  AC_DEFINE_UNQUOTED(TCP_TIMEOUT, $withval))

AC_ARG_ENABLE(tcp-subseq,
[  --enable-tcp-subseq         Enable multiple dns querys using one
			      tcp connection],
  test $enableval = "yes" && AC_DEFINE(TCP_SUBSEQ))

AC_ARG_WITH(par-queries,
[  --with-tcp-qtimeout=secs    Specify default parallel query number (default=2) ],
  AC_DEFINE_UNQUOTED(PAR_QUERIES, $withval))

dnl Checks for programs.
AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_YACC
yflags="-d $YFLAGS"
AC_SUBST(yflags)
AM_PROG_LEX

dnl For dbm subsystem libraries
AC_PROG_RANLIB

if test "$target" = "autodetect" ; then
  AC_MSG_CHECKING([for autodetect build target])
  uname_sys=`uname`
  if test $? -ne 0 ; then
    AC_MSG_RESULT([failed])
    AC_MSG_ERROR([uname failed or was not found in path])
  else
    if test "$uname_sys" = Linux ; then
      AC_MSG_RESULT(Linux)
      AC_DEFINE(TARGET, TARGET_LINUX)
      target="Linux"
    elif test "$uname_sys" = FreeBSD ; then
      AC_MSG_RESULT(FreeBSD)
      AC_DEFINE(TARGET, TARGET_BSD)
      target="BSD"
    elif test "$uname_sys" = OpenBSD -o $sys = NetBSD ; then
      AC_MSG_RESULT([*BSD])
      AC_MSG_WARN([pdnsd may not work with BSD Unices other than FreeBSD])
      AC_DEFINE(TARGET, TARGET_BSD)
      target="BSD"
    else 
      AC_MSG_RESULT([failed])
      AC_MSG_ERROR(
[Your system type could not be identified. Try setting it manually using 
--with-target])
    fi	
  fi
fi

if test "$target" = BSD ; then
  uname_sys=`uname`
  if test "$uname_sys" = FreeBSD ; then
    AC_MSG_CHECKING([for FreeBSD version])
    osrel=`sysctl -n kern.osreldate`
    if test $osrel -ge 500016 ; then
      AC_MSG_RESULT([5.0 (>= 500016)])
      freebsd_pthread="5"
    else
      AC_MSG_RESULT([<=5.0 (< 500016)])
      freebsd_pthread="4"
    fi
  fi
fi	

AC_MSG_CHECKING([whether lexer supports line numbers in debugging])
yylineno_option=""
AC_TRY_COMPILE([#include "src/lex.yy.c"], [YYSTYPE yylval; return yylineno;], 
   yylineno_option="",
   yylineno_option="%option yylineno")
AC_SUBST(yylineno_option)
if test -z "$yylineno_option"; then
   AC_MSG_RESULT(no)
   AC_DEFINE(NO_YYLINENO)
else
   AC_MSG_RESULT(yes)
fi

dnl Checks for libraries.
if test $target = "Linux"; then
  AC_CHECK_LIB(pthread, pthread_kill)
fi
if test $target = "BSD" ; then
  if test $freebsd_pthread = 4 ; then
    CFLAGS="$CFLAGS -pthread"
    AC_SUBST(CFLAGS)
  else
    AC_CHECK_LIB(c_r, pthread_kill, , 
      AC_MSG_ERROR([You must have libc_r installed to build/run pdnsd!]))
  fi;
fi

if test "$cachegdbm" = "gdbm"; then
  AC_CHECK_LIB(gdbm, gdbm_open, ,
    AC_MSG_ERROR([Must have libgdbm.so if gdbm cacheing is specified.]))
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h malloc.h sys/ioctl.h sys/time.h syslog.h unistd.h netinet/in.h)

if test "$cachegdbm" = "gdbm"; then
  AC_CHECK_HEADER(gdbm.h, , 
    AC_MSG_ERROR([Must have gdbm.h if gdbm cacheing is specified.]))
fi
	
dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

AC_MSG_CHECKING([for structure in_pktinfo])
pktinfo_struct="no"
AC_TRY_COMPILE([#include <netinet/in.h>], [struct in_pktinfo pi;], 
  pktinfo_struct="yes", 
  AC_DEFINE(NO_IN_PKTINFO))

if test [ "$pktinfo_struct" = "yes" ]; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi
  
dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(usleep)
AC_CHECK_FUNCS(gettimeofday mkfifo select socket strerror uname snprintf, true, 
		AC_MSG_ERROR([One of the functions required for pdnsd were not found.]))
AC_CHECK_FUNCS(poll, true, AC_DEFINE(NO_POLL))

AC_OUTPUT([
pdnsd.spec
Makefile
file-list.base
doc/pdnsd.conf
src/Makefile
src/conf-lex.l
src/pdnsd-ctl/Makefile
src/cacheing/Makefile
src/cacheing/native/Makefile
src/cacheing/gdbm/Makefile
src/rc/Makefile
src/rc/RedHat/Makefile
src/rc/RedHat/pdnsd
src/rc/SuSE/Makefile
src/rc/SuSE/pdnsd
src/rc/Debian/Makefile
src/rc/Debian/pdnsd
src/test/Makefile
])
